{"version":3,"file":"elapsed-time-logger.js","sources":["../src/index.ts"],"sourcesContent":["import hrtime from 'browser-hrtime';\r\ninterface IElapsedLogger {\r\n  end(label?: string): void;\r\n  get(): string;\r\n  _diff(): HrTime;\r\n  parse(hrtime: HrTime): string;\r\n}\r\ntype HrTime = [number, number];\r\nclass ElapsedLogger implements IElapsedLogger {\r\n  private _timer: HrTime;\r\n  constructor() {\r\n    this._timer = hrtime();\r\n  }\r\n\r\n  end(label: string = '') {\r\n    const elapsedTime = this.get();\r\n    console.log(`${label ? label + ' ' : ''}${elapsedTime}`);\r\n  }\r\n\r\n  _diff(): HrTime {\r\n    return hrtime(this._timer);\r\n  }\r\n\r\n  get(): string {\r\n    const diff = this._diff();\r\n    return this.parse(diff);\r\n  }\r\n\r\n  parse(hrtime: HrTime): string {\r\n    let result = '';\r\n    const sourceMS: number = (hrtime[0] * 1e9 + hrtime[1]) / 1e6;\r\n    const ms: number = Math.round(sourceMS % 1000);\r\n    const sec: number = Math.round((((sourceMS / 1000) % 60) + Number.EPSILON) * 100) / 100;\r\n    const mins: number = Math.floor((sourceMS / (1000 * 60)) % 60);\r\n    const hrs: number = Math.floor((sourceMS / (1000 * 60 * 60)) % 24);\r\n\r\n    if (hrs > 0) {\r\n      result += hrs + ' hours ';\r\n    }\r\n    if (mins > 0) {\r\n      result += mins + ' minutes ';\r\n    }\r\n    if (sec >= 1) {\r\n      result += sec + ' seconds ';\r\n    }\r\n    if (mins === 0 && hrs === 0 && sec < 1 && ms > 0) {\r\n      result += ms + 'ms';\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\nconst _timers = new Map<string, IElapsedLogger>();\r\n\r\nconst start = (label: string | null = null): IElapsedLogger => {\r\n  const elapsed = new ElapsedLogger();\r\n  if (!label) {\r\n    return elapsed;\r\n  }\r\n  _timers.set(label, elapsed);\r\n  return elapsed;\r\n};\r\n\r\nconst end = (label: string, overrideLabel: string | null = null): void => {\r\n  const elapsedTime = get(label);\r\n  if (elapsedTime === false) {\r\n    return;\r\n  }\r\n  console.log(`${overrideLabel || label} ${elapsedTime}`);\r\n  _timers.delete(label);\r\n};\r\n\r\nconst get = (label: string): string | boolean => {\r\n  const timer = _timers.get(label);\r\n  if (!timer) {\r\n    console.warn(`No such label '${label}' for ElapsedLogger`); // process.emitWarning\r\n    return false;\r\n  }\r\n  return timer.get();\r\n};\r\nexport default {\r\n  get,\r\n  end,\r\n  start,\r\n};\r\n"],"names":["this","_timer","hrtime","ElapsedLogger","label","elapsedTime","get","console","log","diff","_diff","parse","result","sourceMS","ms","Math","round","sec","Number","EPSILON","mins","floor","hrs","_timers","Map","timer","warn","end","overrideLabel","delete","start","elapsed","set"],"mappings":"4XAUE,aACEA,KAAKC,OAASC,YAwClB,OArCEC,gBAAA,SAAIC,gBAAAA,MACF,IAAMC,EAAcL,KAAKM,MACzBC,QAAQC,KAAOJ,EAAQA,EAAQ,IAAM,IAAKC,IAG5CF,kBAAA,WACE,OAAOD,UAAOF,KAAKC,SAGrBE,gBAAA,WACE,IAAMM,EAAOT,KAAKU,QAClB,OAAOV,KAAKW,MAAMF,IAGpBN,kBAAA,SAAMD,GACJ,IAAIU,EAAS,GACPC,GAAgC,IAAZX,EAAO,GAAWA,EAAO,IAAM,IACnDY,EAAaC,KAAKC,MAAMH,EAAW,KACnCI,EAAcF,KAAKC,MAAoD,KAA3CH,EAAW,IAAQ,GAAMK,OAAOC,UAAkB,IAC9EC,EAAeL,KAAKM,MAAOR,MAA0B,IACrDS,EAAcP,KAAKM,MAAOR,OAA+B,IAe/D,OAbIS,EAAM,IACRV,GAAUU,EAAM,WAEdF,EAAO,IACTR,GAAUQ,EAAO,aAEfH,GAAO,IACTL,GAAUK,EAAM,aAEL,IAATG,GAAsB,IAARE,GAAaL,EAAM,GAAKH,EAAK,IAC7CF,GAAUE,EAAK,MAGVF,QAILW,EAAU,IAAIC,IAoBdlB,EAAM,SAACF,GACX,IAAMqB,EAAQF,EAAQjB,IAAIF,GAC1B,OAAKqB,EAIEA,EAAMnB,OAHXC,QAAQmB,KAAK,kBAAkBtB,0BACxB,UAII,CACbE,MACAqB,IAnBU,SAACvB,EAAewB,gBAAAA,QAC1B,IAAMvB,EAAcC,EAAIF,IACJ,IAAhBC,IAGJE,QAAQC,KAAOoB,GAAiBxB,OAASC,GACzCkB,EAAQM,OAAOzB,KAcf0B,MA7BY,SAAC1B,gBAAAA,QACb,IAAM2B,EAAU,IAAI5B,EACpB,OAAKC,GAGLmB,EAAQS,IAAI5B,EAAO2B,GACZA,GAHEA"}